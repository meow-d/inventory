# main functions
FUNCTION main():
    first_column = [
        "Code",
        "Description",
        "Category",
        "Unit",
        "Price",
        "Quantity",
        "Minimum",
    ]
    PRINT("Welcome to this very badly made invenvory system.")
    inventory = init(first_column)
    current_user_type = user_authentication()

    IF current_user_type == "admin":
        admin_user_interface(inventory)
    ELIF current_user_type == "inventory-checker":
        inventory_checker_user_interface(inventory)
    ELIF current_user_type == "purchaser":
        purchaser_user_interface(inventory)
    ELSE:
        PRINT("Invalid user type. Exiting...")


## authentication
FUNCTION user_authentication():
    userdata = read_csv_as_list("userdata.txt")

    IF not any(user[2] == "admin" FOR user IN userdata):
        PRINT("No admin account detected. Please create an admin account.")
        add_new_user(admin_only=True)

    WHILE True:
        username = input_str("\nEnter username: ")
        PRINT("(for your security, password INPUT isn't displayed)")
        password = getpass("Enter password: ")

        FOR user IN userdata:
            IF user[0] == username and user[1] == password:
                RETURN user[2]
        PRINT("Incorrect username or password. Please try again.")


FUNCTION add_new_user(admin_only=False):
    IF admin_only:
        user_type = "admin"
    ELSE:
        WHILE True:
            PRINT(
                """
Please select a user type from the list.
    1 = admin
    2 = inventory-checker
    3 = purchaser
        """
            )
            user_type_choice = input_int("Please select a user type: ")
            IF user_type_choice == 1:
                user_type = "admin"
                break
            ELIF user_type_choice == 2:
                user_type = "inventory-checker"
                break
            ELIF user_type_choice == 3:
                user_type = "purchaser"
                break
            ELSE:
                PRINT("Invalid choice, please try again.\n")
    username = input_str("Enter username FOR the new user: ")
    password = input_str("Enter password FOR the new user: ")
    password_comfirmation = input_str("Enter password again: ")

    IF password == password_comfirmation:
        userdata = read_csv_as_list("userdata.txt")
        FOR user IN userdata:
            IF username IN user[0]:
                PRINT("Username is already used.")
                RETURN

        userdata.append([username, password, user_type])
        write_list_to_csv("userdata.txt", userdata)
    ELSE:
        PRINT("Passwords don't match. Please try again.")


# user interfaces FOR each user type
FUNCTION admin_user_interface(inventory):
    WHILE True:
        PRINT(
            """
Please INPUT a number from the list to choose an operation.
    1 = take stock
    2 = replinish stock
    3 = view replenish list
    4 = insert item
    5 = update item
    6 = delete item
    7 = search item
    8 = list all items
    9 = exit without saving changes
    0 = exit, saving changes
    10 = add new user account"""
        )
        user_input = input_int("Please select a command: ")
        IF user_input == 1:
            take_stock(inventory)
        ELIF user_input == 2:
            stock_replenish(inventory)
        ELIF user_input == 3:
            view_replenish_list(inventory)
        ELIF user_input == 4:
            insert_item(inventory)
        ELIF user_input == 5:
            update_item(inventory)
        ELIF user_input == 6:
            delete_item(inventory)
        ELIF user_input == 7:
            search_items(inventory)
        ELIF user_input == 8:
            list_all_items(inventory)
        ELIF user_input == 9:
            user_input = input_bool("are you sure you want to exit WITHOUT SAVING? [y/n]: ")
            IF user_input:
                break
        ELIF user_input == 0:
            user_input = input_bool(
                "are you sure you want to exit WHILE SAVING ALL THE CHANGES YOU MADE? [y/n]: "
            )
            IF user_input:
                write_list_to_csv("inventory.txt", inventory)
                break
            ELSE:
                PRINT("...")
        ELIF user_input == 10:
            add_new_user()
        ELSE:
            PRINT("Invalid INPUT.")
        PRINT()


FUNCTION inventory_checker_user_interface(inventory):
    WHILE True:
        PRINT(
            """
Please INPUT a number from the list to choose an operation.
    1 = take stock
    2 = search item
    3 = list all items
    9 = exit without saving changes
    0 = exit, saving changes"""
        )
        user_input = input_int("Please select a command: ")
        IF user_input == 1:
            take_stock(inventory)
        ELIF user_input == 2:
            search_items(inventory)
        ELIF user_input == 3:
            list_all_items(inventory)
        ELIF user_input == 9:
            user_input = input_bool("are you sure you want to exit WITHOUT SAVING? [y/n]: ")
            IF user_input:
                break
        ELIF user_input == 0:
            user_input = input_bool(
                "are you sure you want to exit WHILE SAVING ALL THE CHANGES YOU MADE? [y/n]: "
            )
            IF user_input:
                write_list_to_csv("inventory.txt", inventory)
                break
        ELSE:
            PRINT("Invalid INPUT.")
        PRINT()


FUNCTION purchaser_user_interface(inventory):
    WHILE True:
        PRINT(
            """
Please INPUT a number from the list to choose an operation.
    1 = replinish stock
    2 = view replenish list
    3 = search item
    4 = list all items
    9 = exit without saving changes
    0 = exit, saving changes"""
        )
        user_input = input_int("Please select a command: ")
        PRINT(user_input)
        IF user_input == 1:
            stock_replenish(inventory)
        ELIF user_input == 2:
            view_replenish_list(inventory)
        ELIF user_input == 3:
            search_items(inventory)
        ELIF user_input == 4:
            list_all_items(inventory)
        ELIF user_input == 9:
            user_input = input_bool("are you sure you want to exit WITHOUT SAVING? [y/n]: ")
            IF user_input:
                break
        ELIF user_input == 0:
            user_input = input_bool(
                "are you sure you want to exit WHILE SAVING ALL THE CHANGES YOU MADE? [y/n]: "
            )
            IF user_input:
                write_list_to_csv("inventory.txt", inventory)
                break
        ELSE:
            PRINT("Invalid INPUT.")
        PRINT()


# init
FUNCTION init(first_column: list):
    IF not os.path.exists("userdata.txt"):
        open("userdata.txt", "x")
        PRINT("userdata.txt created. Please create an admin account.")
        add_new_user(admin_only=True)

    IF not os.path.exists("inventory.txt"):
        open("inventory.txt", "x")
        PRINT("inventory.txt created.")
        write_list_to_csv("inventory.txt", [first_column])
    RETURN read_csv_as_list("inventory.txt")


# file functions
FUNCTION read_csv_as_list(filename):
    with open(filename, "r") as f:
        file_text = f.read()
        f.close()
        list_of_lines = file_text.split("\n")
        inventory = []
        FOR line IN list_of_lines:
            IF not line == "":
                inventory.append(line.split(","))
    RETURN inventory


FUNCTION write_list_to_csv(filename, data: list):
    # convert
    out = ""
    FOR row IN data:
        row_str = map(str, row)
        out += ",".join(row_str) + "\n"

    # write
    raw_file = open(filename, "w")
    raw_file.write(out)
    raw_file.close()


# table functions
FUNCTION PRINT_table(data, data_to_PRINT):
    column_lengths = [
        max(len(str(row[col])) FOR row IN data) FOR col IN range(len(data[0]))
    ]

    PRINT_row(data[0], column_lengths)
    PRINT_separator(column_lengths)

    FOR row IN data_to_PRINT:
        PRINT_row(row, column_lengths)


FUNCTION PRINT_row(row, column_lengths):
    FOR col, value IN enumerate(row):
        PRINT("|", str(value).ljust(column_lengths[col]), end=" ")
    PRINT("|")


FUNCTION PRINT_separator(column_lengths):
    FOR length IN column_lengths:
        PRINT("|", "-" * length, end=" ")
    PRINT("|")


# INPUT validation functions
FUNCTION input_int(question: str):
    WHILE True:
        PRINT(question)
        READ user_input
        TRY:
            user_input = int(user_input.strip())
        EXCEPT:
            PRINT("Please INPUT an integer. ", end="")
        ELSE:
            RETURN user_input


FUNCTION input_float(question: str):
    WHILE True:
        PRINT(question)
        READ user_input
        TRY:
            user_input = float(user_input.strip())
        EXCEPT:
            PRINT("Please INPUT an number. ", end="")
        ELSE:
            RETURN user_input


FUNCTION input_str(question: str):
    WHILE True:
        PRINT(question)
        READ user_input
        user_input = user_input.strip()
        IF "," IN user_input:
            PRINT("',' is an invalid character. ", end="")
        ELSE:
            RETURN user_input


FUNCTION input_bool(question: str):
    WHILE True:
        PRINT(question)
        READ user_input
        user_input = user_input.strip()
        IF user_input.lower() == "y":
            RETURN True
        ELIF user_input.lower() == "n":
            RETURN False
        ELSE:
            PRINT("Please answer IN y or n. ", end="")


FUNCTION input_row_number(data, question: str):
    WHILE True:
        row_number = input_int(question)
        IF row_number == 0:
            PRINT("Please INPUT a number above 0. ", end="")
        ELIF row_number > len(data):
            PRINT("Row does not exist")
        ELSE:
            RETURN row_number


# inventory-checker user functions
FUNCTION take_stock(data: list):
    IF len(data) == 1:
        PRINT("There are no items IN the database.")
    ELSE:
        item_row = input_row_number(data, "Which row of item do you want to update?: ")
        IF item_row == 0:
            PRINT("Please INPUT a number above 0")
        ELIF item_row > len(data):
            PRINT("Row does not exist")
        ELSE:
            # stock column position is hardcoded
            PRINT(f"Current stock of {data[item_row][2]} is {data[item_row][5]}.")
            user_input = input_int(
                f"Please insert new stock quantity, or leave blank to not modify data: "
            )
            data[item_row][5] = user_input


# purchaser user functions
FUNCTION stock_replenish(data):
    IF len(data) == 1:
        PRINT("There are no items IN the database.")
    ELSE:
        item_row = input_row_number(
            data, "Which row of item do you want to replenish?: "
        )
        IF item_row == 0:
            PRINT("Please INPUT a number above 0")
        ELIF item_row > len(data):
            PRINT("Row does not exist")
        ELSE:
            # stock column position is hardcoded
            PRINT(f"Currently stock of {data[item_row][2]}: {data[item_row][5]}")
            user_input = input_int(
                f"Please insert the amount of stock to replenish, or leave blank to not modify data: "
            )
            data[item_row][5] = int(data[item_row][5]) + user_input


FUNCTION view_replenish_list(data):
    replenish_list = []
    FOR item IN data:
        # the positions are hardcoded
        IF item[5] < item[6]:
            replenish_list.append(item)
    IF len(replenish_list) > 0:
        PRINT("Replenish list:")
        PRINT_table(data, replenish_list)
    ELSE:
        PRINT("No items require replenishment.")


# admin user functions (inventory)
FUNCTION insert_item(data: list):
    amount_to_insert = input_int("How many items do you want to add?: ")
    WHILE amount_to_insert != 0:
        data.append([])
        FOR column_name IN data[0]:
            # INPUT data, with data validation
            IF column_name == "Price":
                user_input = input_float(f"Please insert new data FOR {column_name}: ")
            ELIF column_name IN ["Quantity", "Minimum", "Code"]:
                user_input = input_int(f"Please insert new data FOR {column_name}: ")
            ELSE:
                user_input = input_str(f"Please insert new data FOR {column_name}: ")
            data[-1].append(user_input)
        amount_to_insert -= 1
    PRINT(f"{amount_to_insert} items added successfully.")


FUNCTION update_item(data: list):
    IF len(data) == 1:
        PRINT("There are no items IN the database.")
    ELSE:
        item_id = input_row_number(data, "Which row do you want to update?: ")
        PRINT("Leave blank to not override data")
        FOR column_number, (column_name, column_value) IN enumerate(
            zip(data[0], data[item_id])
        ):
            # INPUT data, with data validation
            IF column_name == "Price":
                user_input = input_float(
                    f"Please insert new data FOR {column_name} ({column_value}): "
                )
            ELIF column_name IN ["Quantity", "Minimum", "Code"]:
                user_input = input_int(
                    f"Please insert new data FOR {column_name} ({column_value}): "
                )
            ELSE:
                user_input = input_str(
                    f"Please insert new data FOR {column_name} ({column_value}): "
                )
            IF user_input != "":
                data[item_id][column_number] = user_input
        PRINT("Data has been updated succesfully")


FUNCTION delete_item(data):
    delete_by_item_code = input_bool(
        "Do you want to delete by item code? IF not, you'll have to enter the row number [y/n]: "
    )
    IF delete_by_item_code:
        item_deleted = False
        code = input_str("Enter item code to delete: ")

        deletion_comfirmed = input_bool(
            f"Are you sure you want to delete item {code}? [y/n]: "
        )
        IF deletion_comfirmed:
            FOR item IN data:
                IF item[0] == code:
                    data.remove(item)
                    item_deleted = True
                    break

            IF item_deleted:
                PRINT(f"Item with code {code} has been deleted.")
            ELSE:
                PRINT("Item not found.")

    ELSE:
        row_number = input_row_number(data, "Enter row number to delete: ")
        deletion_comfirmed = input_bool(
            f"Are you sure you want to delete row {row_number}? [y/n]: "
        )
        IF deletion_comfirmed:
            data.remove(item[row_number])
            PRINT(f"Item with code {row_number} has been deleted.")


# search functions (accessible to everyone)
FUNCTION search_items(data):
    user_input = input_int(
        """Search items by:
    1 = Description
    2 = Code range
    3 = Category
    4 = Price range
    5 = Row number range
Enter choice: """
    )

    IF user_input == "1":
        description = input_str("Enter item description: ")
        found_items = []
        FOR item IN data:
            IF description.lower() IN item[2].lower():
                found_items.append(item)
        IF found_items:
            PRINT("Found items:")
            PRINT_table(data, found_items)
        ELSE:
            PRINT("No items found.")

    ELIF user_input == "2":
        range_min = input_int("Enter minimum code range: ")
        range_max = input_int("Enter maximum code range: ")
        found_items = []
        FOR item IN data:
            IF int(range_min) <= int(item[1]) <= int(range_max):
                found_items.append(item)
        IF found_items:
            PRINT("Found items:")
            PRINT_table(data, found_items)
        ELSE:
            PRINT("No items found.")

    ELIF user_input == "3":
        category = input_str("Enter category: ")
        found_items = []
        FOR item IN data:
            IF category.lower() == item["category"].lower():
                found_items.append(item)
        IF found_items:
            PRINT("Found items:")
            PRINT_table(data, found_items)
        ELSE:
            PRINT("No items found.")

    ELIF user_input == "4":
        price_min = input_float("Enter minimum price: ")
        price_max = input_float("Enter maximum price: ")
        found_items = []
        FOR item IN data:
            IF price_min <= item["price"] <= price_max:
                found_items.append(item)
        IF found_items:
            PRINT("Found items:")
            PRINT_table(data, found_items)
        ELSE:
            PRINT("No items found.")

    ELIF user_input == "5":
        range_min = input_int("Enter minimum row number range: ")
        range_max = input_int("Enter maximum row number range: ")
        found_items = []
        FOR item IN data[range_min:range_max]:
            found_items.append(item)
        IF found_items:
            PRINT("Found items:")
            PRINT_table(data, found_items)
        ELSE:
            PRINT("No items found.")

    ELSE:
        PRINT("Please insert a number from 1 to 4", end="")
        RETURN


FUNCTION list_all_items(data):
    IF len(data) > 10:
        user_input = input_bool("The list can get very long, are you sure?")
        IF user_input:
            PRINT_table(data, data[1:])
    ELSE:
        PRINT_table(data, data[1:])
